module num_cycle (
    input clk,  // clock
    input rst,  // reset
    output number[11] // number
  ) {

  .clk(clk){
    .rst(rst){
      dff counter[26](.clk(clk));
      dff numb[11](.clk(clk));
      fsm state = {ADD, RESET};
    }
  }
  always {
    counter.d = counter.q + 1;
    number = numb.q;
    
    case(state.q){
      state.ADD:
        // CYCLING THROUGH THE NUMBERS
        numb.d = numb.q;
        if (counter.q[25] == 1) {
          numb.d = numb.q + 1;
          counter.d = 0;
          if (numb.q == d99) {
            state.d = state.RESET;
          }
          else {
            state.d = state.ADD;
          }
        }
      state.RESET:
        // RESETTING NUMBER CYCLE BACK TO ZERO
        numb.d = 0;
        if (counter.q[25] == 1){
          state.d = state.ADD;
        }
    }
  }
}