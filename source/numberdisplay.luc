module numberdisplay (
    input clk,  // clock
    input rst,  // reset
    output outputnumber[11],
    input numberinput[11],
    input tempresultinput[11],
    input targetresultinput[11],
    input buttonpress,
    input lives[10],
    input pass_signal[2]
  ) {
  
  .clk(clk){
    edge_detector edge_detector(#RISE(1), #FALL(0)); // detect rising edges
    button_conditioner button_cond;     // button input conditioner
    .rst(rst){
      fsm state = {STARTNUMCYCLE, STARTTEMPRESULT, TARGETRESULT, NUMCYCLE, TEMPRESULT,BUFFER, LOSE, WIN};
      dff outputreg[11];
      dff counter[27];
      dff currentlives[10];
      dff pass[2];
    }
  }
  always {
    button_cond.in = buttonpress;
    edge_detector.in = button_cond.out;
    outputnumber = outputreg.q;
    counter.d = counter.q + 1;
    pass.d = pass_signal;
  
    
    case(state.q){
      state.STARTNUMCYCLE:
        outputreg.d = numberinput;
        if (edge_detector.out){
          state.d = state.STARTTEMPRESULT;
          counter.d = 0;
        }
      
      state.STARTTEMPRESULT:
        outputreg.d = tempresultinput;
        if (edge_detector.out){
          state.d = state.TARGETRESULT;
          counter.d = 0;
        }
      
      state.TARGETRESULT:
        outputreg.d = targetresultinput;
        if (counter.q[26] == 1){
          state.d = state.NUMCYCLE;
          counter.d = 0;
        }
      state.NUMCYCLE:
        outputreg.d = numberinput;
        if (edge_detector.out){
          state.d = state.TEMPRESULT;
          counter.d = 0;
          currentlives.d = lives;
        }
      
      state.TEMPRESULT:
        outputreg.d = tempresultinput;
        if (counter.q[26] == 1){
          if (pass.q == 1){
            state.d = state.BUFFER;
              counter.d = 0;
            }
          else if (pass.q == 2){
            outputreg.d = 2047;
            state.d = state.WIN;
          }                
          else if  (currentlives.q > 0){
            state.d = state.NUMCYCLE;
            counter.d = 0;
          }

          else if (currentlives.q == 0){
            outputreg.d = 7777;
            state.d = state.LOSE;
          }

        }
        
      state.BUFFER:
        outputreg.d = numberinput;
        if (edge_detector.out)
        state.d = state.STARTNUMCYCLE;
          
      state.LOSE:
        outputreg.d = 7777;
        state.d = state.LOSE;
        
      state.WIN:
        outputreg.d = 2047;
        state.d = state.WIN;
    }
  }
}